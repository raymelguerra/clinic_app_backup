// <auto-generated />
using System;
using ClinicApp.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicApp.Core.Migrations
{
    [DbContext(typeof(clinicbdContext))]
    [Migration("20220919141142_InitialMigrations")]
    partial class InitialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicApp.Core.Models.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PayrollId")
                        .HasColumnType("int");

                    b.Property<double>("RateEmployees")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_FK_ClientAgreement");

                    b.HasIndex(new[] { "CompanyId" }, "IX_FK_CompanyAgreement");

                    b.HasIndex(new[] { "PayrollId" }, "IX_FK_PayrollAgreement");

                    b.ToTable("Agreement", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_FK_ClientBilling");

                    b.HasIndex(new[] { "ContractorId" }, "IX_FK_ContractorBilling");

                    b.HasIndex(new[] { "PeriodId" }, "IX_FK_PeriodBilling");

                    b.ToTable("Billing", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorizationNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AuthorizationNUmber");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RecipientID");

                    b.Property<string>("ReferringProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseInformationId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyApprovedAnalyst")
                        .HasColumnType("int");

                    b.Property<int>("WeeklyApprovedRbt")
                        .HasColumnType("int")
                        .HasColumnName("WeeklyApprovedRBT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiagnosisId" }, "IX_FK_DiagnosisClient");

                    b.HasIndex(new[] { "ReleaseInformationId" }, "IX_FK_ReleaseInformationClient");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RenderingProvider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contractor", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ContractorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractorType", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.PatientAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_FK_ClientPatientAccount");

                    b.ToTable("PatientAccount", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_FK_CompanyPayroll");

                    b.HasIndex(new[] { "ContractorId" }, "IX_FK_ContractorPayroll");

                    b.HasIndex(new[] { "ContractorTypeId" }, "IX_FK_ContractorTypePayroll");

                    b.HasIndex(new[] { "ProcedureId" }, "IX_FK_ProcedurePayroll");

                    b.ToTable("Payroll", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DocumentDeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PayPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Period", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.PlaceOfService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceOfService", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Procedure", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ReleaseInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReleaseInformation", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientId" }, "IX_FK_ClientServiceLog");

                    b.HasIndex(new[] { "ContractorId" }, "IX_FK_ContractorServiceLog");

                    b.HasIndex(new[] { "PeriodId" }, "IX_FK_PeriodServiceLog");

                    b.ToTable("ServiceLog", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.SubProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProcedureId" }, "IX_FK_ProcedureSubProcedure");

                    b.ToTable("SubProcedure", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.UnitDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfService")
                        .HasColumnType("datetime");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceOfServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceLogId")
                        .HasColumnType("int");

                    b.Property<int>("SubProcedureId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlaceOfServiceId" }, "IX_FK_PlaceOfServiceUnitDetail");

                    b.HasIndex(new[] { "ServiceLogId" }, "IX_FK_ServiceLogUnitDetail");

                    b.HasIndex(new[] { "SubProcedureId" }, "IX_FK_SubProcedureUnitDetail");

                    b.ToTable("UnitDetail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "624e1332-49f7-4a56-b322-c5f9d8d34c30",
                            ConcurrencyStamp = "73bc0592-6205-41ee-8ccc-9c740be5d076",
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = "6b6c980a-d8c6-4019-8a71-71c11829f6de",
                            ConcurrencyStamp = "6e04bd8f-5ed1-4a29-ba3b-2d62c3cfa705",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0d053a6a-d6f2-4942-8a0f-1317cabcda25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c95f311f-3f51-4000-bbd8-c0ff733703a1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ROOT",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6bf97df-847c-4d4a-9ac3-3e7c34f85f2a",
                            TwoFactorEnabled = false,
                            UserName = "root"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Agreement", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Client", "Client")
                        .WithMany("Agreements")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientAgreement");

                    b.HasOne("ClinicApp.Core.Models.Company", "Company")
                        .WithMany("Agreements")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyAgreement");

                    b.HasOne("ClinicApp.Core.Models.Payroll", "Payroll")
                        .WithMany("Agreements")
                        .HasForeignKey("PayrollId")
                        .IsRequired()
                        .HasConstraintName("FK_PayrollAgreement");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Billing", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Client", "Client")
                        .WithMany("Billings")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientBilling");

                    b.HasOne("ClinicApp.Core.Models.Contractor", "Contractor")
                        .WithMany("Billings")
                        .HasForeignKey("ContractorId")
                        .IsRequired()
                        .HasConstraintName("FK_ContractorBilling");

                    b.HasOne("ClinicApp.Core.Models.Period", "Period")
                        .WithMany("Billings")
                        .HasForeignKey("PeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_PeriodBilling");

                    b.Navigation("Client");

                    b.Navigation("Contractor");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Client", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Diagnosis", "Diagnosis")
                        .WithMany("Clients")
                        .HasForeignKey("DiagnosisId")
                        .IsRequired()
                        .HasConstraintName("FK_DiagnosisClient");

                    b.HasOne("ClinicApp.Core.Models.ReleaseInformation", "ReleaseInformation")
                        .WithMany("Clients")
                        .HasForeignKey("ReleaseInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_ReleaseInformationClient");

                    b.Navigation("Diagnosis");

                    b.Navigation("ReleaseInformation");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.PatientAccount", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Client", "Client")
                        .WithMany("PatientAccounts")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientPatientAccount");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Payroll", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Company", "Company")
                        .WithMany("Payrolls")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyPayroll");

                    b.HasOne("ClinicApp.Core.Models.Contractor", "Contractor")
                        .WithMany("Payrolls")
                        .HasForeignKey("ContractorId")
                        .IsRequired()
                        .HasConstraintName("FK_ContractorPayroll");

                    b.HasOne("ClinicApp.Core.Models.ContractorType", "ContractorType")
                        .WithMany("Payrolls")
                        .HasForeignKey("ContractorTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ContractorTypePayroll");

                    b.HasOne("ClinicApp.Core.Models.Procedure", "Procedure")
                        .WithMany("Payrolls")
                        .HasForeignKey("ProcedureId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcedurePayroll");

                    b.Navigation("Company");

                    b.Navigation("Contractor");

                    b.Navigation("ContractorType");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ServiceLog", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Client", "Client")
                        .WithMany("ServiceLogs")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientServiceLog");

                    b.HasOne("ClinicApp.Core.Models.Contractor", "Contractor")
                        .WithMany("ServiceLogs")
                        .HasForeignKey("ContractorId")
                        .IsRequired()
                        .HasConstraintName("FK_ContractorServiceLog");

                    b.HasOne("ClinicApp.Core.Models.Period", "Period")
                        .WithMany("ServiceLogs")
                        .HasForeignKey("PeriodId")
                        .IsRequired()
                        .HasConstraintName("FK_PeriodServiceLog");

                    b.Navigation("Client");

                    b.Navigation("Contractor");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.SubProcedure", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.Procedure", "Procedure")
                        .WithMany("SubProcedures")
                        .HasForeignKey("ProcedureId")
                        .IsRequired()
                        .HasConstraintName("FK_ProcedureSubProcedure");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.UnitDetail", b =>
                {
                    b.HasOne("ClinicApp.Core.Models.PlaceOfService", "PlaceOfService")
                        .WithMany("UnitDetails")
                        .HasForeignKey("PlaceOfServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_PlaceOfServiceUnitDetail");

                    b.HasOne("ClinicApp.Core.Models.ServiceLog", "ServiceLog")
                        .WithMany("UnitDetails")
                        .HasForeignKey("ServiceLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceLogUnitDetail");

                    b.HasOne("ClinicApp.Core.Models.SubProcedure", "SubProcedure")
                        .WithMany("UnitDetails")
                        .HasForeignKey("SubProcedureId")
                        .IsRequired()
                        .HasConstraintName("FK_SubProcedureUnitDetail");

                    b.Navigation("PlaceOfService");

                    b.Navigation("ServiceLog");

                    b.Navigation("SubProcedure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Client", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Billings");

                    b.Navigation("PatientAccounts");

                    b.Navigation("ServiceLogs");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Company", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Payrolls");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Contractor", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("Payrolls");

                    b.Navigation("ServiceLogs");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ContractorType", b =>
                {
                    b.Navigation("Payrolls");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Diagnosis", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Payroll", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Period", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("ServiceLogs");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.PlaceOfService", b =>
                {
                    b.Navigation("UnitDetails");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.Procedure", b =>
                {
                    b.Navigation("Payrolls");

                    b.Navigation("SubProcedures");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ReleaseInformation", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.ServiceLog", b =>
                {
                    b.Navigation("UnitDetails");
                });

            modelBuilder.Entity("ClinicApp.Core.Models.SubProcedure", b =>
                {
                    b.Navigation("UnitDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
